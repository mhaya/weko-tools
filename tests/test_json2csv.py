# -*- coding: utf-8 -*-

import pytest
from weko_tools.json2csv import JSON2Flat,JSON2CSV
import io

@pytest.mark.parametrize('input,output', [
    ({"name": "john", "age": 31}, ['$.age', '$.name']),
    ({"type": "object", "properties": {"name": {"type": "string", "minLength": 3, "description": "Please enter your name"}, "vegetarian": {"type": "boolean"}, "birthDate": {"type": "string", "format": "date", "description": "Please enter your birth date."}, "nationality": {"type": "string", "enum": ["DE", "IT", "JP", "US", "RU", "Other"]}}},
    ['$.properties.birthDate.description', '$.properties.birthDate.format', '$.properties.birthDate.type', '$.properties.name.description', '$.properties.name.minLength', '$.properties.name.type', '$.properties.nationality.enum[0]', '$.properties.nationality.enum[1]', '$.properties.nationality.enum[2]', '$.properties.nationality.enum[3]', '$.properties.nationality.enum[4]', '$.properties.nationality.enum[5]', '$.properties.nationality.type', '$.properties.vegetarian.type', '$.type']),
    ({"type": "object", "properties": {"name": {"type": "string"}, "vegetarian": {"type": "boolean"}, "birthDate": {"type": "string"}, "personalData": {"type": "object", "properties": {"age": {"type": "integer"}}, "additionalProperties": True, "required": ["age"]}, "postalCode": {"type": "string"}}, "additionalProperties": True, "required": ["name", "vegetarian", "birthDate", "personalData", "postalCode"]},
    ['$.additionalProperties', '$.properties.birthDate.type', '$.properties.name.type', '$.properties.personalData.additionalProperties', '$.properties.personalData.properties.age.type', '$.properties.personalData.required[0]', '$.properties.personalData.type', '$.properties.postalCode.type', '$.properties.vegetarian.type', '$.required[0]', '$.required[1]', '$.required[2]', '$.required[3]', '$.required[4]', '$.type']),
    ({"items": [{"key": "parentkey.subitem_1523259806195","title": "言語","titleMap": [{ "name": "ja","value": "ja"},{ "name": "en","value": "en"}],"type": "select"},{"key": "parentkey.subitem_1523259817731","title": "タイトル","type": "text"}],"key": "parentkey","type": "fieldset"},['$.items[0].key', '$.items[0].title', '$.items[0].titleMap[0].name', '$.items[0].titleMap[0].value', '$.items[0].titleMap[1].name', '$.items[0].titleMap[1].value', '$.items[0].type', '$.items[1].key', '$.items[1].title', '$.items[1].type', '$.key', '$.type'])
])
def test_listAllPaths(input, output):
        app = JSON2Flat()
        path = app.listAllPaths(input)
        assert output == path

@pytest.mark.parametrize('json,paths,output', [
    ({"name": "john", "age":31},['$.age', '$.name'],[31,'john']),
    ({"type": "object", "properties": {"name": {"type": "string", "minLength": 3,"description": "Please enter your name"},"vegetarian": {"type": "boolean"},"birthDate": {"type": "string","format": "date","description": "Please enter your birth date."},"nationality": {"type": "string","enum": ["DE","IT","JP","US","RU","Other"]}}},
     ['$.properties.birthDate.description', '$.properties.birthDate.format', '$.properties.birthDate.type', '$.properties.name.description', '$.properties.name.minLength', '$.properties.name.type', '$.properties.nationality.enum[0]',
        '$.properties.nationality.enum[1]', '$.properties.nationality.enum[2]', '$.properties.nationality.enum[3]', '$.properties.nationality.enum[4]', '$.properties.nationality.enum[5]', '$.properties.nationality.type', '$.properties.vegetarian.type', '$.type'],
     ['Please enter your birth date.', 'date', 'string', 'Please enter your name', 3, 'string', 'DE', 'IT', 'JP', 'US', 'RU', 'Other', 'string', 'boolean', 'object']),
    ({"type": "object", "properties": {"name": {"type": "string"}, "vegetarian": {"type": "boolean"},"birthDate": {"type": "string"},"personalData": {"type": "object","properties": {"age": {"type": "integer"}},"additionalProperties": True,"required": ["age"]},"postalCode": {"type": "string"}},"additionalProperties": True,"required": ["name","vegetarian","birthDate","personalData","postalCode"]},
     ['$.additionalProperties', '$.properties.birthDate.type', '$.properties.name.type', '$.properties.personalData.additionalProperties', '$.properties.personalData.properties.age.type', '$.properties.personalData.required[0]',
        '$.properties.personalData.type', '$.properties.postalCode.type', '$.properties.vegetarian.type', '$.required[0]', '$.required[1]', '$.required[2]', '$.required[3]', '$.required[4]', '$.type'],
     [True, 'string', 'string', True, 'integer', 'age', 'object', 'string', 'boolean', 'name', 'vegetarian', 'birthDate', 'personalData', 'postalCode', 'object']),
     ({'items': [{'key': 'parentkey.subitem_1523259806195', 'title': '言語', 'titleMap': [{'name': 'ja', 'value': 'ja'}, {'name': 'en', 'value': 'en'}], 'type': 'select'}, {'key': 'parentkey.subitem_1523259817731', 'title': 'タイトル', 'type': 'text'}], 'key': 'parentkey', 'type': 'fieldset'},['$.items[0].key', '$.items[0].title', '$.items[0].titleMap[0].name', '$.items[0].titleMap[0].value', '$.items[0].titleMap[1].name', '$.items[0].titleMap[1].value', '$.items[0].type', '$.items[1].key', '$.items[1].title', '$.items[1].type', '$.key', '$.type'],['parentkey.subitem_1523259806195', '言語', 'ja', 'ja', 'en', 'en', 'select', 'parentkey.subitem_1523259817731', 'タイトル', 'text', 'parentkey', 'fieldset'])
])
def test_listAllValues(json, paths, output):
    app = JSON2Flat()
    values = app.listAllValues(json, paths)
    print(values)
    assert output == values

@pytest.mark.parametrize('input,output', [
        ({"name": "john", "age":31},{'$.age':31, '$.name':'john'}),
        ({"type": "object", "properties": {"name": {"type": "string", "minLength": 3,"description": "Please enter your name"},"vegetarian": {"type": "boolean"},"birthDate": {"type": "string","format": "date","description": "Please enter your birth date."},"nationality": {"type": "string","enum": ["DE","IT","JP","US","RU","Other"]}}},
         {'$.properties.birthDate.description': 'Please enter your birth date.', '$.properties.birthDate.format': 'date', '$.properties.birthDate.type': 'string', '$.properties.name.description': 'Please enter your name', '$.properties.name.minLength': 3, '$.properties.name.type': 'string', '$.properties.nationality.enum[0]': 'DE', '$.properties.nationality.enum[1]': 'IT', '$.properties.nationality.enum[2]': 'JP', '$.properties.nationality.enum[3]': 'US', '$.properties.nationality.enum[4]': 'RU', '$.properties.nationality.enum[5]': 'Other', '$.properties.nationality.type': 'string', '$.properties.vegetarian.type': 'boolean', '$.type': 'object'}),
        ({"type": "object", "properties": {"name": {"type": "string"}, "vegetarian": {"type": "boolean"},"birthDate": {"type": "string"},"personalData": {"type": "object","properties": {"age": {"type": "integer"}},"additionalProperties": True,"required": ["age"]},"postalCode": {"type": "string"}},"additionalProperties": True,"required": ["name","vegetarian","birthDate","personalData","postalCode"]},
         {'$.additionalProperties': True, '$.properties.birthDate.type': 'string', '$.properties.name.type': 'string', '$.properties.personalData.additionalProperties': True, '$.properties.personalData.properties.age.type': 'integer', '$.properties.personalData.required[0]': 'age', '$.properties.personalData.type': 'object', '$.properties.postalCode.type': 'string', '$.properties.vegetarian.type': 'boolean', '$.required[0]': 'name', '$.required[1]': 'vegetarian', '$.required[2]': 'birthDate', '$.required[3]': 'personalData', '$.required[4]': 'postalCode', '$.type': 'object'}),
         ({'items': [{'key': 'parentkey.subitem_1523259806195', 'title': '言語', 'titleMap': [{'name': 'ja', 'value': 'ja'}, {'name': 'en', 'value': 'en'}], 'type': 'select'}, {'key': 'parentkey.subitem_1523259817731', 'title': 'タイトル', 'type': 'text'}], 'key': 'parentkey', 'type': 'fieldset'},{'$.items[0].key': 'parentkey.subitem_1523259806195', '$.items[0].title': '言語', '$.items[0].titleMap[0].name': 'ja', '$.items[0].titleMap[0].value': 'ja', '$.items[0].titleMap[1].name': 'en', '$.items[0].titleMap[1].value': 'en', '$.items[0].type': 'select', '$.items[1].key': 'parentkey.subitem_1523259817731', '$.items[1].title': 'タイトル', '$.items[1].type': 'text', '$.key': 'parentkey', '$.type': 'fieldset'})
])
def test_toFlat(input, output):
    app = JSON2Flat()
    values = app.toFlat(input)
    assert output == values

@pytest.mark.parametrize('output,input', [
        ({"name": "john", "age":31},{'$.age':31, '$.name':'john'}),
        ({"type": "object", "properties": {"name": {"type": "string", "minLength": 3,"description": "Please enter your name"},"vegetarian": {"type": "boolean"},"birthDate": {"type": "string","format": "date","description": "Please enter your birth date."},"nationality": {"type": "string","enum": ["DE","IT","JP","US","RU","Other"]}}},
         {'$.properties.birthDate.description': 'Please enter your birth date.', '$.properties.birthDate.format': 'date', '$.properties.birthDate.type': 'string', '$.properties.name.description': 'Please enter your name', '$.properties.name.minLength': 3, '$.properties.name.type': 'string', '$.properties.nationality.enum[0]': 'DE', '$.properties.nationality.enum[1]': 'IT', '$.properties.nationality.enum[2]': 'JP', '$.properties.nationality.enum[3]': 'US', '$.properties.nationality.enum[4]': 'RU', '$.properties.nationality.enum[5]': 'Other', '$.properties.nationality.type': 'string', '$.properties.vegetarian.type': 'boolean', '$.type': 'object'}),
        ({"type": "object", "properties": {"name": {"type": "string"}, "vegetarian": {"type": "boolean"},"birthDate": {"type": "string"},"personalData": {"type": "object","properties": {"age": {"type": "integer"}},"additionalProperties": True,"required": ["age"]},"postalCode": {"type": "string"}},"additionalProperties": True,"required": ["name","vegetarian","birthDate","personalData","postalCode"]},
         {'$.additionalProperties': True, '$.properties.birthDate.type': 'string', '$.properties.name.type': 'string', '$.properties.personalData.additionalProperties': True, '$.properties.personalData.properties.age.type': 'integer', '$.properties.personalData.required[0]': 'age', '$.properties.personalData.type': 'object', '$.properties.postalCode.type': 'string', '$.properties.vegetarian.type': 'boolean', '$.required[0]': 'name', '$.required[1]': 'vegetarian', '$.required[2]': 'birthDate', '$.required[3]': 'personalData', '$.required[4]': 'postalCode', '$.type': 'object'}),
        ({'items': [{'key': 'parentkey.subitem_1523259806195', 'title': '言語', 'titleMap': [{'name': 'ja', 'value': 'ja'}, {'name': 'en', 'value': 'en'}], 'type': 'select'}, {'key': 'parentkey.subitem_1523259817731', 'title': 'タイトル', 'type': 'text'}], 'key': 'parentkey', 'type': 'fieldset'},
        {'$.items[0].key': 'parentkey.subitem_1523259806195', '$.items[0].title': '言語', '$.items[0].titleMap[0].name': 'ja', '$.items[0].titleMap[0].value': 'ja', '$.items[0].titleMap[1].name': 'en', '$.items[0].titleMap[1].value': 'en', '$.items[0].type': 'select', '$.items[1].key': 'parentkey.subitem_1523259817731', '$.items[1].title': 'タイトル', '$.items[1].type': 'text', '$.key': 'parentkey', '$.type': 'fieldset'}),
    ({"files": [{"links": {"self": "https://zenodo.org/api/files/15a88592-d852-4e7f-89fe-21879a4e7834/go-release-archive.tgz"}, "checksum": "md5:2af2dff020932ba3be6edfeb39644fd2", "bucket": "15a88592-d852-4e7f-89fe-21879a4e7834", "key": "go-release-archive.tgz", "type": "tgz", "size": 42536051735}], "owners": [40466], "doi": "10.5281/zenodo.3477535", "stats": {"version_unique_downloads": 1009.0, "unique_views": 971.0, "views": 1183.0, "downloads": 125.0, "unique_downloads": 103.0, "version_unique_views": 9437.0, "volume": 5317006466875.0, "version_downloads": 2206.0, "version_views": 12870.0, "version_volume": 81050700440243.0}, "links": {"doi": "https://doi.org/10.5281/zenodo.3477535", "conceptdoi": "https://doi.org/10.5281/zenodo.1205166", "bucket": "https://zenodo.org/api/files/15a88592-d852-4e7f-89fe-21879a4e7834", "conceptbadge": "https://zenodo.org/badge/doi/10.5281/zenodo.1205166.svg", "html": "https://zenodo.org/record/3477535", "latest_html": "https://zenodo.org/record/3477535", "badge": "https://zenodo.org/badge/doi/10.5281/zenodo.3477535.svg", "latest": "https://zenodo.org/api/records/3477535"}, "conceptdoi": "10.5281/zenodo.1205166", "created": "2019-10-09T02:13:48.939257+00:00", "updated": "2019-10-09T19:06:07.562765+00:00", "conceptrecid": "1205166", "revision": 2, "id": 3477535, "metadata": {"access_right_category": "success", "doi": "10.5281/zenodo.3477535", "description": "<p>Archival bundle of GO data release.</p>", "license": {"id": "CC-BY-4.0"}, "title": "Gene Ontology Data Archive", "relations": {"version": [{"count": 17, "index": 16, "parent": {"pid_type": "recid", "pid_value": "1205166"}, "is_last": True, "last_child": {"pid_type": "recid", "pid_value": "3477535"}}]}, "version": "2019-10-07", "references": ["Ashburner et al. Gene ontology: tool for the unification of biology (2000) Nat Genet 25(1):25-9. Online at Nature Genetics.", "GO Consortium, Nucleic Acids Res., 2017"], "communities": [{"id": "gene-ontology"}, {"id": "zenodo"}], "publication_date": "2018-07-02", "creators": [{"orcid": "0000-0001-8244-1536", "affiliation": "Lawrence Berkeley National Laboratory", "name": "Carbon, Seth"}, {"orcid": "0000-0002-6601-2165", "affiliation": "Lawrence Berkeley National Laboratory", "name": "Mungall, Chris"}], "access_right": "open", "resource_type": {"type": "dataset", "title": "Dataset"}, "related_identifiers": [{"scheme": "doi", "identifier": "10.5281/zenodo.1205166", "relation": "isVersionOf"}]}},{"$.conceptdoi": "10.5281/zenodo.1205166", "$.conceptrecid": "1205166", "$.created": "2019-10-09T02:13:48.939257+00:00", "$.doi": "10.5281/zenodo.3477535", "$.files[0].bucket": "15a88592-d852-4e7f-89fe-21879a4e7834", "$.files[0].checksum": "md5:2af2dff020932ba3be6edfeb39644fd2", "$.files[0].key": "go-release-archive.tgz", "$.files[0].links.self": "https://zenodo.org/api/files/15a88592-d852-4e7f-89fe-21879a4e7834/go-release-archive.tgz", "$.files[0].size": 42536051735, "$.files[0].type": "tgz", "$.id": 3477535, "$.links.badge": "https://zenodo.org/badge/doi/10.5281/zenodo.3477535.svg", "$.links.bucket": "https://zenodo.org/api/files/15a88592-d852-4e7f-89fe-21879a4e7834", "$.links.conceptbadge": "https://zenodo.org/badge/doi/10.5281/zenodo.1205166.svg", "$.links.conceptdoi": "https://doi.org/10.5281/zenodo.1205166", "$.links.doi": "https://doi.org/10.5281/zenodo.3477535", "$.links.html": "https://zenodo.org/record/3477535", "$.links.latest": "https://zenodo.org/api/records/3477535", "$.links.latest_html": "https://zenodo.org/record/3477535", "$.metadata.access_right": "open", "$.metadata.access_right_category": "success", "$.metadata.communities[0].id": "gene-ontology", "$.metadata.communities[1].id": "zenodo", "$.metadata.creators[0].affiliation": "Lawrence Berkeley National Laboratory", "$.metadata.creators[0].name": "Carbon, Seth", "$.metadata.creators[0].orcid": "0000-0001-8244-1536", "$.metadata.creators[1].affiliation": "Lawrence Berkeley National Laboratory", "$.metadata.creators[1].name": "Mungall, Chris", "$.metadata.creators[1].orcid": "0000-0002-6601-2165", "$.metadata.description": "<p>Archival bundle of GO data release.</p>", "$.metadata.doi": "10.5281/zenodo.3477535", "$.metadata.license.id": "CC-BY-4.0", "$.metadata.publication_date": "2018-07-02", "$.metadata.references[0]": "Ashburner et al. Gene ontology: tool for the unification of biology (2000) Nat Genet 25(1):25-9. Online at Nature Genetics.", "$.metadata.references[1]": "GO Consortium, Nucleic Acids Res., 2017", "$.metadata.related_identifiers[0].identifier": "10.5281/zenodo.1205166", "$.metadata.related_identifiers[0].relation": "isVersionOf", "$.metadata.related_identifiers[0].scheme": "doi", "$.metadata.relations.version[0].count": 17, "$.metadata.relations.version[0].index": 16, "$.metadata.relations.version[0].is_last": True, "$.metadata.relations.version[0].last_child.pid_type": "recid", "$.metadata.relations.version[0].last_child.pid_value": "3477535", "$.metadata.relations.version[0].parent.pid_type": "recid", "$.metadata.relations.version[0].parent.pid_value": "1205166", "$.metadata.resource_type.title": "Dataset", "$.metadata.resource_type.type": "dataset", "$.metadata.title": "Gene Ontology Data Archive", "$.metadata.version": "2019-10-07", "$.owners[0]": 40466, "$.revision": 2, "$.stats.downloads": 125.0, "$.stats.unique_downloads": 103.0, "$.stats.unique_views": 971.0, "$.stats.version_downloads": 2206.0, "$.stats.version_unique_downloads": 1009.0, "$.stats.version_unique_views": 9437.0, "$.stats.version_views": 12870.0, "$.stats.version_volume": 81050700440243.0, "$.stats.views": 1183.0, "$.stats.volume": 5317006466875.0, "$.updated": "2019-10-09T19:06:07.562765+00:00"})
])
def test_toStructure(output, input):
    app = JSON2Flat()
    values = app.toStructure(input)

    assert output == values


@pytest.mark.parametrize('input,output', [
    ([{'properties': {'birthDate': {'description': 'Please enter your birth date.', 'format': 'date', 'type': 'string'}, 'name': {'description': 'Please enter your name', 'minLength': 3.0, 'type': 'string'}, 'nationality': {'enum': ['DE', 'IT', 'JP', 'US', 'RU', 'Other'], 'type': 'string'}, 'vegetarian': {'type': 'boolean'}}, 'type': 'object'}, {'properties': {'birthDate': {'description': 'Please enter your birth date.', 'format': 'date', 'type': 'string'}, 'name': {'description': 'Please enter your name', 'minLength': 3.0, 'type': 'string'}, 'nationality': {'enum': ['DE', 'IT', 'JP', 'US', 'RU', 'Other'], 'type': 'string'}, 'vegetarian': {'type': 'boolean'}}, 'type': 'object'}],'"$.properties.birthDate.description","$.properties.birthDate.format","$.properties.birthDate.type","$.properties.name.description","$.properties.name.minLength","$.properties.name.type","$.properties.nationality.enum[0]","$.properties.nationality.enum[1]","$.properties.nationality.enum[2]","$.properties.nationality.enum[3]","$.properties.nationality.enum[4]","$.properties.nationality.enum[5]","$.properties.nationality.type","$.properties.vegetarian.type","$.type"\r\n"Please enter your birth date.","date","string","Please enter your name",3.0,"string","DE","IT","JP","US","RU","Other","string","boolean","object"\r\n"Please enter your birth date.","date","string","Please enter your name",3.0,"string","DE","IT","JP","US","RU","Other","string","boolean","object"\r\n')
])
def test_writeCSV(input,output):
    app = JSON2CSV()
    file =  io.StringIO()
    app.writeCSV(input,file)
    values = file.getvalue()
    assert output == values

@pytest.mark.parametrize('input,output', [
('"$.properties.birthDate.description","$.properties.birthDate.format","$.properties.birthDate.type","$.properties.name.description","$.properties.name.minLength","$.properties.name.type","$.properties.nationality.enum[0]","$.properties.nationality.enum[1]","$.properties.nationality.enum[2]","$.properties.nationality.enum[3]","$.properties.nationality.enum[4]","$.properties.nationality.enum[5]","$.properties.nationality.type","$.properties.vegetarian.type","$.type"\r\n"Please enter your birth date.","date","string","Please enter your name",3.0,"string","DE","IT","JP","US","RU","Other","string","boolean","object"\r\n"Please enter your birth date.","date","string","Please enter your name",3.0,"string","DE","IT","JP","US","RU","Other","string","boolean","object"\r\n',[{'properties': {'birthDate': {'description': 'Please enter your birth date.', 'format': 'date', 'type': 'string'}, 'name': {'description': 'Please enter your name', 'minLength': 3.0, 'type': 'string'}, 'nationality': {'enum': ['DE', 'IT', 'JP', 'US', 'RU', 'Other'], 'type': 'string'}, 'vegetarian': {'type': 'boolean'}}, 'type': 'object'}, {'properties': {'birthDate': {'description': 'Please enter your birth date.', 'format': 'date', 'type': 'string'}, 'name': {'description': 'Please enter your name', 'minLength': 3.0, 'type': 'string'}, 'nationality': {'enum': ['DE', 'IT', 'JP', 'US', 'RU', 'Other'], 'type': 'string'}, 'vegetarian': {'type': 'boolean'}}, 'type': 'object'}])
])
def test_readCSV(input,output):
    app = JSON2CSV()
    file =  io.StringIO(input)
    values = app.readCSV(file)
    assert output == values